name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]
    

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-s -w" -o dist/sfdc-auth-${{ matrix.goos }}-${{ matrix.goarch }}.exe main.go
        else
          go build -ldflags="-s -w" -o dist/sfdc-auth-${{ matrix.goos }}-${{ matrix.goarch }} main.go
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sfdc-auth-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 30

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            # Extract platform info from directory name
            platform=$(basename "$dir")
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                # Create zip archives for each platform
                if [[ "$filename" == *.exe ]]; then
                  # Windows executable
                  zip -j "release/${filename%.exe}.zip" "$file"
                else
                  # Unix executable
                  tar -czf "release/${filename}.tar.gz" -C "$(dirname "$file")" "$(basename "$file")"
                fi
                # Also copy the raw binary
                cp "$file" "release/"
              fi
            done
          fi
        done
        ls -la release/
    
    - name: Create checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
